name: Validate Terraform in Issue

on:
  workflow_call:
  issues:
    types: [opened, edited]

permissions:
  issues: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Terraform code from issue
        id: extract-terraform
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const terraformRegex = /```(?:terraform|tf)\s*\n([\s\S]*?)```/g;
            const matches = [];
            let match;

            while ((match = terraformRegex.exec(issue.body || '')) !== null) {
              matches.push(match[1].trim());
            }

            if (matches.length === 0) {
              core.setOutput('has_terraform', 'false');
              return;
            }

            const terraformCode = matches.join('\n\n');
            core.setOutput('has_terraform', 'true');
            core.setOutput('terraform_code', terraformCode);

      - name: Setup Terraform
        if: steps.extract-terraform.outputs.has_terraform == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Create Terraform file
        if: steps.extract-terraform.outputs.has_terraform == 'true'
        run: |
          mkdir -p /tmp/terraform-validation
          cd /tmp/terraform-validation
          cat > main.tf << 'EOF'
          ${{ steps.extract-terraform.outputs.terraform_code }}
          EOF

      - name: Terraform Init
        if: steps.extract-terraform.outputs.has_terraform == 'true'
        id: init
        working-directory: /tmp/terraform-validation
        run: terraform init -no-color
        continue-on-error: true

      - name: Terraform Validate
        if: steps.extract-terraform.outputs.has_terraform == 'true' && steps.init.outputs.exitcode == '0'
        id: validate
        working-directory: /tmp/terraform-validation
        run: terraform validate -no-color
        continue-on-error: true

      - name: Create validation comment
        if: steps.extract-terraform.outputs.has_terraform == 'true' && (steps.init.outputs.exitcode != '0' || steps.validate.outputs.exitcode != '0')
        uses: mshick/add-pr-comment@v2
        with:
          issue: ${{ github.event.issue.number }}
          message-id: terraform-validation
          refresh-message-position: true
          message: |
            ⚠️ The provided Terraform configuration is **not valid**. Please ensure that your Terraform configuration and issue is directly reproducible. We are unable to review issues with partial reproductions, including omitted configuration or references to other files.

            ```sh
            terraform init
            terraform validate
            ```
            ${{ steps.init.outputs.exitcode != '0' && format('
            **Terraform init failed:**
            ```
            %s
            ```', steps.init.outputs.stderr) || '' }}${{ steps.validate.outputs.exitcode != '0' && format('
            **Terraform validate failed:**
            ```
            %s
            ```', steps.validate.outputs.stderr) || '' }}

            <sub>In the rare case that an invalid module or multiple files is part of the issue, you can indicate that this is expected with a :+1: on this comment</sub>

      - name: Hide validation comment if valid
        if: steps.extract-terraform.outputs.has_terraform == 'true' && steps.init.outputs.exitcode == '0' && steps.validate.outputs.exitcode == '0'
        uses: mshick/add-pr-comment@v2
        with:
          issue: ${{ github.event.issue.number }}
          message-id: terraform-validation
          message: |
            <!-- Hidden: Terraform configuration is now valid -->
